package Public_Key_System;

import java.io.*;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

/**
 * Created by dashu on 2016-11-16.
 */
public class BOBBOB {
    private static String publicKey;
    private static String privateKey;

    public static void main(String[] args) throws Exception {
        BigInteger n = new BigInteger("3792099834824176115628645611456939155686624866889813355200736094518084851951738802106988293638946637260624086540770503053865060754318891599758061693802471126463455504916114549108231143562002805371497554375651620129239252021028131320522670994013422541244213");
        BigInteger ciphertext = new BigInteger("319019279569737170623237643901735841230401081379068486322575178812988050476577490556799989702523428930916723931687394692529475305170467976919650639171002641177647108309573612952137940208183671430131870918716142203294615980945416447553275168047810847462249");
        BigInteger d = new BigInteger("2945868544342408935393527402390949941167850912051118872392387140761779391527944914977356119531654656090649457466220728008275904708081826286611240715615038353287051209407110008224853123101049292364475612637654761345055034064510026038206255488586704121004033");
        BigInteger result = ciphertext.modPow(d, n);
        System.out.print(result);
    }
}